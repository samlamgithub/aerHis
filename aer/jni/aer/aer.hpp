#ifndef __AER_HPP__
#define __AER_HPP__

#include <limits>
#include <memory>
#include <thread>
#include <tango_interface/event_types/accelerometer_event.hpp>
#include <tango_interface/event_types/gyroscope_event.hpp>
#include <tango_interface/event_types/raw_frame_event.hpp>
#include <tango_interface/myElasticFusion.hpp>
#include <tango_interface/mylogger.hpp>
#include <elasticfusion/ElasticFusion.h>
#include <tango_interface/runDataset.hpp>
#include <tango_interface/runTangoRGBDPoseData.hpp>
#include "tango_interface/ThreadMutexObject.hpp"
#include <tango_client_api.h>
#include <Eigen/Core>

namespace aer {

const int WRITEDATAMODE = 0;
const int EFMODE = 1;
const int DATASETMODE = 2;
const int TANGORGBDDATAMODE = 3;
const int TANGORGBDPOSEDATAMODE = 4;

class Aer {
public:
  Aer();
  ~Aer();

  void setLoggerWidthHeight_callback(const int width, const int height,
                                     const double fx, const double fy,
                                     const double cx, const double cy,
                                     const int max_vertex_count);

  void rgbdCallback(unsigned char *image, TangoPointCloud *pointcloud_buffer,
                    double cameraTime, TangoPoseData pose);

  bool aerStartWriting(bool startWriting);

  // Run ElasticFusion
  bool aerStartElasticFusion(bool startElasticFusion);

  // Run Data set for ElasticFusion
  bool aerStartRundataset(bool startRundataset);

  // Run Tango RGBD data button
  bool aerStartRuntangoRGBDData(bool startRuntangoRGBDData);

  // Run Tango RGBD Pose data button
  bool aerRuntangoRGBDPoseData(bool startRuntangoRGBDPoseData);

  // Save ply file generated by ElasticFusion
  bool savePlyFile();

  tango_interface::Mylogger mylogger;

  tango_interface::MyElasticFusion myElasticFusion;

  tango_interface::RunDatasetEF runDatasetEF;

  tango_interface::RunTangoRGBDPoseData tangoRGBDData;

  ThreadMutexObject<int> userMode;

};

} // namespace aer

#endif // __AER_HPP__
